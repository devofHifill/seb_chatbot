<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500&family=Montserrat:wght@600&display=swap"
  rel="stylesheet">
<script>
  // =======================
  // Chat Widget Config
  // =======================
  window.ChatWidgetConfig = {
    webhook: {
      url: 'https://n8n.filldesigngroup.cloud/webhook/8ad403da-d5a8-4b43-9dc1-d1f8808600c9/chat',
      route: 'general'
    },
    branding: {
      logo: 'https://8blocks.s3.amazonaws.com/lenderd/clients/regie-ford/logo.png',
      name: 'SEB-Mortgage',
      welcomeText: 'Hi 👋, how can we help?',
      responseTimeText: 'We usually respond right away',
      poweredBy: {
        text: 'Powered by Fill Design Group',
        link: 'https://filldesigngroup.com'
      }
    },
    style: {
      primaryColor: '#A361A8',
      secondaryColor: '#A361A8',
      position: 'right',
      backgroundColor: '#ffffff',
      fontColor: '#333333'
    }
  };

  // =======================
  // Chat Widget Script
  // =======================
  (function () {
    // Inject styles
const styles = `
  .n8n-chat-widget {
    --chat--color-primary: var(--n8n-chat-primary-color, #A35EA5);
    --chat--color-secondary: var(--n8n-chat-secondary-color, #aa56acff);
    --chat--color-background: var(--n8n-chat-background-color, #000);
    --chat--color-font: var(--n8n-chat-font-color, #222222); /* darker for better visibility */
    font-family: 'Inter', sans-serif; /* clean UI font */
  }
  .n8n-chat-widget .chat-container {
    position: fixed; bottom: 20px; right: 20px; z-index: 999999;
    display: none; width: 380px; height: 600px;
    background: var(--chat--color-background);
    border-radius: 12px; box-shadow: 0 8px 32px rgba(133,79,255,0.15);
    border: 1px solid rgba(133,79,255,0.2); overflow: hidden; font-family: inherit;
  }
  .n8n-chat-widget .chat-container.position-left { right: auto; left: 20px; }
  .n8n-chat-widget .chat-container.open { display: flex; flex-direction: column; }
  .n8n-chat-widget .brand-header { padding: 16px; display: flex; align-items: center; gap: 12px; border-bottom: 1px solid rgba(133,79,255,0.1); position: relative; }
  .n8n-chat-widget .close-button { position: absolute; right: 16px; top: 50%; transform: translateY(-50%); background: none; border: none; color: var(--chat--color-font); cursor: pointer; font-size: 20px; opacity: 0.6; }
  .n8n-chat-widget .close-button:hover { opacity: 1; }
  .n8n-chat-widget .brand-header img { width: 32px; height: 32px; }
  .n8n-chat-widget .brand-header span { font-family: 'Montserrat', sans-serif; font-weight: 600; color: var(--chat--color-font); }
  .n8n-chat-widget .new-conversation { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); padding: 20px; text-align: center; width: 100%; max-width: 300px; }
  .n8n-chat-widget .welcome-text { font-size: 24px; font-weight: 600; color: var(--chat--color-font); margin-bottom: 24px; line-height: 1.3; }
  .n8n-chat-widget .new-chat-btn { display: flex; align-items: center; justify-content: center; gap: 8px; width: 100%; padding: 16px 24px; background: linear-gradient(135deg, var(--chat--color-primary) 0%, var(--chat--color-secondary) 100%); color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: 500; margin-bottom: 12px; }
  .n8n-chat-widget .chat-interface { display: none; flex-direction: column; height: 100%; }
  .n8n-chat-widget .chat-interface.active { display: flex; }
  .n8n-chat-widget .chat-messages { flex: 1; overflow-y: auto; padding: 20px; display: flex; flex-direction: column; }
  .n8n-chat-widget .chat-message { padding: 12px 16px; margin: 8px 0; border-radius: 12px; max-width: 80%; word-wrap: break-word; font-size: 14px; line-height: 1.5; }
  .n8n-chat-widget .chat-message.user { background: linear-gradient(135deg, var(--chat--color-primary) 0%, var(--chat--color-secondary) 100%); color: white; align-self: flex-end; box-shadow: 0 4px 12px rgba(133,79,255,0.2); }
  .n8n-chat-widget .chat-message.bot { background: var(--chat--color-background); border: 1px solid rgba(133,79,255,0.2); color: var(--chat--color-font); align-self: flex-start; }
  .n8n-chat-widget .chat-input { padding: 16px; display: flex; gap: 8px; border-top: 1px solid rgba(133,79,255,0.1); }
  .n8n-chat-widget .chat-input textarea { flex: 1; padding: 12px; border: 1px solid rgba(133,79,255,0.2); border-radius: 8px; resize: none; font-size: 14px; }
  .n8n-chat-widget .chat-input button { background: linear-gradient(135deg, var(--chat--color-primary) 0%, var(--chat--color-secondary) 100%); color: white; border: none; border-radius: 8px; padding: 0 20px; cursor: pointer; font-weight: 500; }
  
  /* 🔥 Improved chat toggle button */
  .n8n-chat-widget .chat-toggle {
    position: fixed;
    bottom: 20px; right: 20px;
    width: 60px; height: 60px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--chat--color-primary) 0%, var(--chat--color-secondary) 100%);
    color: #fff;
    border: none;
    cursor: pointer;
    display: flex; align-items: center; justify-content: center;
    z-index: 999998;
    box-shadow: 0 0 20px rgba(133,79,255,0.6), 0 4px 12px rgba(0, 0, 0, 0.25);
    animation: pulseGlow 2s infinite ease-in-out;
    transition: transform 0.2s ease;
  }
  .n8n-chat-widget .chat-toggle:hover {
    transform: scale(1.1) rotate(5deg);
  }
  @keyframes pulseGlow {
    0% { box-shadow: 0 0 10px rgba(133,79,255,0.5), 0 4px 12px rgba(0,0,0,0.25); }
    50% { box-shadow: 0 0 25px rgba(133,79,255,0.9), 0 4px 16px rgba(0,0,0,0.3); }
    100% { box-shadow: 0 0 10px rgba(133,79,255,0.5), 0 4px 12px rgba(0,0,0,0.25); }
  }

  .n8n-chat-widget .chat-footer { padding: 8px; text-align: center; border-top: 1px solid rgba(133,79,255,0.1); }
  .n8n-chat-widget .chat-footer a { color: var(--chat--color-primary); font-size: 12px; opacity: 0.8; text-decoration: none; }
`;

    const styleSheet = document.createElement('style');
    styleSheet.textContent = styles;
    document.head.appendChild(styleSheet);

    const defaultConfig = {
      webhook: { url: '', route: '' },
      branding: {
        logo: '',
        name: '',
        welcomeText: '',
        responseTimeText: '',
        poweredBy: { text: 'Powered by n8n', link: 'https://n8n.io' }
      },
      style: {
        primaryColor: '#a0522d',
        secondaryColor: '#8b5e3c',
        position: 'right',
        backgroundColor: '#faf7f2',
        fontColor: '#3a2f2f'
      }
    };

    // ✅ Merge configs
    const cfg = window.ChatWidgetConfig ? {
      webhook: { ...defaultConfig.webhook, ...window.ChatWidgetConfig.webhook },
      branding: {
        ...defaultConfig.branding, ...window.ChatWidgetConfig.branding,
        poweredBy: { ...defaultConfig.branding.poweredBy, ...(window.ChatWidgetConfig.branding?.poweredBy || {}) }
      },
      style: { ...defaultConfig.style, ...window.ChatWidgetConfig.style }
    } : defaultConfig;

    if (window.N8NChatWidgetInitialized) return;
    window.N8NChatWidgetInitialized = true;

    let currentSessionId = '';

    // Build widget container
    const widgetContainer = document.createElement('div');
    widgetContainer.className = 'n8n-chat-widget';
    widgetContainer.style.setProperty('--n8n-chat-primary-color', cfg.style.primaryColor);
    widgetContainer.style.setProperty('--n8n-chat-secondary-color', cfg.style.secondaryColor);
    widgetContainer.style.setProperty('--n8n-chat-background-color', cfg.style.backgroundColor);
    widgetContainer.style.setProperty('--n8n-chat-font-color', cfg.style.fontColor);

    const chatContainer = document.createElement('div');
    chatContainer.className = `chat-container${cfg.style.position === 'left' ? ' position-left' : ''}`;
    chatContainer.innerHTML = `
        <div class="brand-header">
          <img src="${cfg.branding.logo}" alt="${cfg.branding.name}">
          <span>${cfg.branding.name}</span>
          <button class="close-button" aria-label="Close chat">×</button>
        </div>
        <div class="new-conversation">
          <h2 class="welcome-text">${cfg.branding.welcomeText}</h2>
          <button class="new-chat-btn">💬 Send us a message</button>
          <p class="response-text">${cfg.branding.responseTimeText}</p>
        </div>
        <div class="chat-interface">
          <div class="brand-header">
            <img src="${cfg.branding.logo}" alt="${cfg.branding.name}">
            <span>${cfg.branding.name}</span>
            <button class="close-button" aria-label="Close chat">×</button>
          </div>
          <div class="chat-messages"></div>
          <div class="chat-input">
            <textarea placeholder="Type your message here..." rows="1"></textarea>
            <button type="submit">Send</button>
          </div>
          <div class="chat-footer">
            <a href="${cfg.branding.poweredBy.link}" target="_blank">${cfg.branding.poweredBy.text}</a>
          </div>
        </div>
      `;

    const toggleButton = document.createElement('button');
    toggleButton.className = `chat-toggle${cfg.style.position === 'left' ? ' position-left' : ''}`;
    toggleButton.innerHTML = "💬";

    widgetContainer.appendChild(chatContainer);
    widgetContainer.appendChild(toggleButton);
    document.body.appendChild(widgetContainer);

    const newChatBtn = chatContainer.querySelector('.new-chat-btn');
    const chatInterface = chatContainer.querySelector('.chat-interface');
    const messagesContainer = chatContainer.querySelector('.chat-messages');
    const textarea = chatContainer.querySelector('textarea');
    const sendButton = chatContainer.querySelector('button[type="submit"]');

    function generateUUID() { return crypto.randomUUID(); }

    function showBotMessage(text) {
      if (!text || !text.trim()) return; // 🔒 Prevent empty bubbles
      const botMessageDiv = document.createElement('div');
      botMessageDiv.className = 'chat-message bot';
      botMessageDiv.textContent = text;
      messagesContainer.appendChild(botMessageDiv);
      messagesContainer.scrollTo({ top: messagesContainer.scrollHeight, behavior: 'smooth' });
    }


    async function startNewConversation() {
      currentSessionId = generateUUID();
      const data = [{ action: "loadPreviousSession", sessionId: currentSessionId, route: cfg.webhook.route }];
      try {
        const response = await fetch(cfg.webhook.url, {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const responseData = await response.json();
        chatContainer.querySelector('.brand-header').style.display = 'none';
        chatContainer.querySelector('.new-conversation').style.display = 'none';
        chatInterface.classList.add('active');

        const firstMsg = Array.isArray(responseData)
          ? responseData[0]?.output
          : responseData?.output;

        showBotMessage(firstMsg || "Hi 👋 I'm Imani — how can I help you today?");

      } catch {
        showBotMessage("⚠️ Bot unavailable, please try again later.");
      }
    }

    async function sendMessage(message) {
      const msgData = { action: "sendMessage", sessionId: currentSessionId, route: cfg.webhook.route, chatInput: message };
      const userDiv = document.createElement('div');
      userDiv.className = 'chat-message user';
      userDiv.textContent = message;
      messagesContainer.appendChild(userDiv);
      messagesContainer.scrollTo({ top: messagesContainer.scrollHeight, behavior: 'smooth' });
      try {
        const response = await fetch(cfg.webhook.url, {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(msgData)
        });
        const data = await response.json();
        showBotMessage(Array.isArray(data) ? data[0].output : data.output);
      } catch {
        showBotMessage("⚠️ Failed to send. Please try again.");
      }
    }

    

    newChatBtn.addEventListener('click', startNewConversation);
    sendButton.addEventListener('click', () => {
      if (textarea.value.trim()) { sendMessage(textarea.value.trim()); textarea.value = ''; }
    });
    textarea.addEventListener('keypress', e => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        if (textarea.value.trim()) { sendMessage(textarea.value.trim()); textarea.value = ''; }
      }
    });
    toggleButton.addEventListener('click', () => { chatContainer.classList.toggle('open'); textarea.focus(); });
    chatContainer.querySelectorAll('.close-button').forEach(btn =>
      btn.addEventListener('click', () => chatContainer.classList.remove('open'))
    );
  })();
</script>
